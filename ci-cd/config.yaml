# tried to work on the Continuous deployment part with this script but would require more time to debug
# Here the workflow is divided in the Build and Deploy part
# Build is same as that presented in the DFLY-CI-CD/.circleci/config.yaml file,
# it is building the docker image with the Node JS application code and defining
# the starting command for the app on port 8080.

# Deployment part of the workflow will provide the functionality to edit the Deployment file
# with new image that is generated in the Build part of the workflow.
# The idea is to utilize the orbs which are configurable jobs according the
# provider in our case aws-eks.
# it would edit the job with the new iamge and update the config with kubectl command.
# Which will redeploy the pods with the New Node JS image. 



version: 2.1


jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app ./app/
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - deploy:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              login="$(aws ecr get-login)"
              ${login}
              docker tag app "${ECR_ENDPOINT}:${CIRCLE_SHA1}"
              docker push "${ECR_ENDPOINT}:${CIRCLE_SHA1}"
            fi
  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: DFLY-CI-CD/eks-terraform/deployments/deployment.yaml
          resource-name: deployment/my-deployment

orbs:
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0
workflows:
  build_and_deploy:
      build :
      deployment:
        jobs:
          - create-deployment:
            cluster-name: eks-demo-deployment
          - aws-eks/update-container-image:
              cluster-name: dfly-eks-cluster
              container-image-updates: ${ECR_ENDPOINT}:${CIRCLE_SHA1}
              post-steps:
                - kubernetes/delete-resource:
                    resource-names: my-deployment
                    resource-types: deployment
                    wait: true
              record: true
              requires:
                - create-deployment
              resource-name: deployment/my-deployment
